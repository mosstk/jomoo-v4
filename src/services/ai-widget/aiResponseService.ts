import type { AIResponse, ProductContext, ProductRecommendation } from './types';
import { supabase } from '@/integrations/supabase/client';
import { SuggestionsService } from './suggestionsService';
import { KnowledgeBaseService } from './knowledgeBaseService';

export class AIResponseService {
  // Main method to generate AI response using RAG
  static async generateResponse(message: string, context: ProductContext | null): Promise<AIResponse> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
      const relevanceCheck = KnowledgeBaseService.isQuestionRelevant(message);
      
      if (!relevanceCheck.isRelevant) {
        return {
          content: KnowledgeBaseService.getIrrelevantQuestionResponse(relevanceCheck.reason),
          suggestions: SuggestionsService.getSuggestionsForContext(context).slice(0, 3)
        };
      }

      // Use RAG search for real knowledge base data
      const ragResponse = await this.searchKnowledgeBase(message, context);
      
      if (ragResponse && ragResponse.success && ragResponse.response) {
        return {
          content: ragResponse.response,
          suggestions: SuggestionsService.getSuggestionsForContext(context).slice(0, 2),
          productRecommendations: this.getProductRecommendations(context)
        };
      }
      
      // Fallback to previous response system if RAG fails
      console.log('RAG search failed, using fallback response');
      return this.getMockResponse(message, context);
      
    } catch (error) {
      console.error('Error in AI response generation:', error);
      return this.getMockResponse(message, context);
    }
  }

  // Search knowledge base using RAG
  private static async searchKnowledgeBase(message: string, context: ProductContext | null) {
    try {
      const { data, error } = await supabase.functions.invoke('rag-search', {
        body: {
          query: message,
          limit: 5,
          category: context?.category ? this.mapCategoryToKnowledgeBase(context.category) : undefined,
          product_type: context?.category ? this.mapCategoryToProductType(context.category) : undefined
        }
      });

      if (error) {
        console.error('RAG search error:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('Failed to search knowledge base:', error);
      return null;
    }
  }

  // Map website categories to knowledge base categories
  private static mapCategoryToKnowledgeBase(category: string): string {
    const categoryMap: { [key: string]: string } = {
      'smart-toilet': 'product_info',
      'one-piece-toilet': 'product_info', 
      'basin': 'product_info',
      'bathtub': 'product_info',
      'shower-enclosure': 'product_info',
      'faucet': 'product_info',
      'rain-shower': 'product_info',
      'bidet-spray': 'product_info',
      'urinal': 'product_info',
      'accessories': 'product_info',
      'about': 'company_info',
      'contact': 'contact_info',
      'warranty': 'warranty_info'
    };
    
    return categoryMap[category] || 'product_info';
  }

  // Map website categories to product types
  private static mapCategoryToProductType(category: string): string | undefined {
    const typeMap: { [key: string]: string } = {
      'smart-toilet': 'smart_toilet',
      'one-piece-toilet': 'one_piece_toilet',
      'basin': 'basin',
      'bathtub': 'bathtub',
      'shower-enclosure': 'shower_enclosure',
      'faucet': 'faucet',
      'rain-shower': 'rain_shower',
      'bidet-spray': 'bidet_spray',
      'urinal': 'urinal',
      'accessories': 'accessories'
    };
    
    return typeMap[category];
  }

  private static getMockResponse(message: string, context: ProductContext | null): AIResponse {
    const lowerMessage = message.toLowerCase();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const relevanceCheck = KnowledgeBaseService.isQuestionRelevant(message);
    if (!relevanceCheck.isRelevant) {
      return {
        content: KnowledgeBaseService.getIrrelevantQuestionResponse(),
        suggestions: SuggestionsService.getSuggestionsForContext(context)
      };
    }

    // Bidet Spray specific responses - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    if (context?.productName === 'Bidet Sprayer') {
      if (lowerMessage.includes('‡∏£‡∏≤‡∏Ñ‡∏≤')) {
        return {
          content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞ (Bidet Spray) ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:
‚Ä¢ ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏° TOA JOMOO ‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡πà‡∏≤‡∏ô
‚Ä¢ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤ Contact ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üí° ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'contact-1', text: '‡∏≠‡∏¢‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢', category: 'product' },
            { id: 'showroom-1', text: '‡∏≠‡∏¢‡∏≤‡∏Å‡∏ô‡∏±‡∏î‡∏ä‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°', category: 'product' }
          ]
        };
      }
      
      if (lowerMessage.includes('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á') || lowerMessage.includes('‡∏™‡πÄ‡∏õ‡∏Ñ') || lowerMessage.includes('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå')) {
        return {
          content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏õ‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå:
‚Ä¢ ‡∏£‡∏∏‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞
‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô:
‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
‚Ä¢ ‡∏™‡πÄ‡∏õ‡∏Ñ‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ  
‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'contact-2', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', category: 'product' },
            { id: 'products-1', text: '‡∏î‡∏π‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ', category: 'product' }
          ]
        };
      }
    }

    // Smart Toilet specific responses - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    if (context?.productName === 'Smart Toilet') {
      if (lowerMessage.includes('‡∏£‡∏≤‡∏Ñ‡∏≤') || lowerMessage.includes('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå') || lowerMessage.includes('‡∏™‡πÄ‡∏õ‡∏Ñ')) {
        return {
          content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏õ‡∏Ñ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Smart Toilet ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå:
‚Ä¢ Smart Toilet ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∏‡πà‡∏ô
‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
‚Ä¢ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ "‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡πÄ‡∏õ‡∏Ñ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'contact-3', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ Smart Toilet', category: 'product' },
            { id: 'showroom-2', text: '‡∏ô‡∏±‡∏î‡∏ä‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°', category: 'product' }
          ]
        };
      }
    }

    // One Piece Toilet ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    if (context?.productName === 'One Piece Toilet' || context?.productName === 'Basin' || 
        context?.currentPage !== 'home') {
      if (lowerMessage.includes('‡∏£‡∏≤‡∏Ñ‡∏≤') || lowerMessage.includes('‡∏™‡πÄ‡∏õ‡∏Ñ') || 
          lowerMessage.includes('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå') || lowerMessage.includes('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á')) {
        return {
          content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á ${context?.productName || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ'} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå:
‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∏‡πà‡∏ô
‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô:
‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
‚Ä¢ ‡∏™‡πÄ‡∏õ‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î
‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'contact-4', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°', category: 'product' },
            { id: 'showroom-3', text: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', category: 'product' }
          ]
        };
      }
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    if (lowerMessage.includes('‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô')) {
      return {
        content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ TOA JOMOO ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:
‚Ä¢ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
‚Ä¢ ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏° TOA JOMOO
‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤ Contact ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üí° ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'contact-5', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô', category: 'warranty' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    if (lowerMessage.includes('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á')) {
      return {
        content: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:
‚Ä¢ ‡∏ó‡∏µ‡∏°‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ TOA JOMOO
‚Ä¢ ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡πà‡∏≤‡∏ô

üí° ‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'contact-6', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á', category: 'installation' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏° - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    if (lowerMessage.includes('‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°') || lowerMessage.includes('‡∏ä‡∏°')) {
      return {
        content: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏° TOA JOMOO! 

üìç ‡∏°‡∏µ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏Ç‡∏≤ ‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
üïê ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç

üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡πà‡∏≤‡∏ô:
‚Ä¢ ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤ Contact ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå
‚Ä¢ ‡πÇ‡∏ó‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢

üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'showroom-4', text: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', category: 'product' },
          { id: 'contact-7', text: '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô', category: 'product' }
        ]
      };
    }

    // Default response - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    const knowledge = KnowledgeBaseService.getAvailableKnowledge();
    
    return {
      content: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ TOA JOMOO 

${context ? `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤ ${context.productName} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?` : '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå TOA JOMOO ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?'}

üè¢ TOA JOMOO - ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
üìã ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå‡∏°‡∏µ: Smart Toilet, Basin, Faucet, Shower ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢
üìû ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏°‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ó‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡πÄ‡∏õ‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ñ‡∏£‡∏±‡∏ö`,
      suggestions: SuggestionsService.getSuggestionsForContext(context)
    };
  }

  // Get product recommendations based on context (only real products)
  private static getProductRecommendations(context: ProductContext | null): ProductRecommendation[] {
    if (!context?.category) return [];

    // Return only real products that exist in our data files
    if (context.category === 'smart-toilet') {
      return [
        {
          productId: 'smart1',
          productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô 1',
          reason: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î Smart Toilet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
          image: '/lovable-uploads/3aede93b-84f3-4a77-acf5-a767654f5f65.png',
          category: 'smart-toilet'
        }
      ];
    }

    if (context.category === 'one-piece-toilet') {
      return [
        {
          productId: 'onepiece1',
          productName: 'One Piece Toilet ‡∏£‡∏∏‡πà‡∏ô 1',
          reason: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î One Piece Toilet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
          image: '/lovable-uploads/43b4b548-71a6-4327-93ae-90547e01ef13.png',
          category: 'one-piece-toilet'
        }
      ];
    }

    return [];
  }

  private static getSmartToiletRecommendations(): ProductRecommendation[] {
    return [
      {
        productId: 'st1',
        productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
        reason: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
        image: '/lovable-uploads/353d8916-0ba6-457a-95a4-cfc67b65e5f6.png',
        category: 'toilet'
      },
      {
        productId: 'st2', 
        productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î',
        reason: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        image: '/lovable-uploads/450f66c7-17d5-4b40-8f20-2c239481083e.png', 
        category: 'toilet'
      }
    ];
  }

  // Generate embeddings for knowledge base (used for initial setup)
  static async generateEmbeddings(): Promise<void> {
    try {
      const { data, error } = await supabase.functions.invoke('generate-embeddings', {
        body: { action: 'generate_all' }
      });

      if (error) {
        console.error('Error generating embeddings:', error);
        throw error;
      }

      console.log('Embeddings generated successfully:', data);
    } catch (error) {
      console.error('Failed to generate embeddings:', error);
      throw error;
    }
  }

  // Method for future OpenAI integration
  static async callOpenAI(message: string, context: ProductContext | null): Promise<string> {
    // This will be implemented when OpenAI API key is provided
    const prompt = context 
      ? `Context: User is viewing ${context.productName} (${context.category}). ${message}`
      : message;

    // Placeholder for actual OpenAI API call
    console.log('Would call OpenAI with prompt:', prompt);
    
    throw new Error('OpenAI API key not configured');
  }
}