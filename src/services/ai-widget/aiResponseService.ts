import type { AIResponse, ProductContext, ProductRecommendation } from './types';
import { supabase } from '@/integrations/supabase/client';
import { SuggestionsService } from './suggestionsService';
import { KnowledgeBaseService } from './knowledgeBaseService';

export class AIResponseService {
  // Main method to generate AI response using RAG
  static async generateResponse(message: string, context: ProductContext | null): Promise<AIResponse> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
      const relevanceCheck = KnowledgeBaseService.isQuestionRelevant(message);
      
    if (!relevanceCheck.isRelevant) {
      const suggestions = await SuggestionsService.getSuggestionsForContext(context);
      return {
        content: KnowledgeBaseService.getIrrelevantQuestionResponse(relevanceCheck.reason),
        suggestions: suggestions.slice(0, 3)
      };
    }

      // Use RAG search for real knowledge base data
      console.log('üöÄ Starting RAG search for message:', message);
      const ragResponse = await this.searchKnowledgeBase(message, context);
      
      if (ragResponse && ragResponse.success && ragResponse.response) {
        console.log('‚úÖ RAG search successful, returning RAG response');
        const suggestions = await SuggestionsService.getSuggestionsForContext(context);
        return {
          content: ragResponse.response,
          suggestions: suggestions.slice(0, 2),
          productRecommendations: this.getProductRecommendations(context)
        };
      }
      
      // Fallback to previous response system if RAG fails
      console.log('‚ùå RAG search failed, using fallback response');
      console.log('RAG response:', ragResponse);
      return await this.getMockResponse(message, context);
      
    } catch (error) {
      console.error('Error in AI response generation:', error);
      return await this.getMockResponse(message, context);
    }
  }

  // Search knowledge base using RAG
  private static async searchKnowledgeBase(message: string, context: ProductContext | null) {
    try {
      console.log('üîç Searching RAG with message:', message);
      console.log('üîç Context:', context);
      
      const { data, error } = await supabase.functions.invoke('rag-search', {
        body: {
          query: message,
          limit: 5,
          category: context?.category ? this.mapCategoryToKnowledgeBase(context.category) : undefined,
          product_type: context?.category ? this.mapCategoryToProductType(context.category) : undefined
        }
      });

      console.log('üì° RAG response data:', data);
      console.log('‚ùå RAG response error:', error);

      if (error) {
        console.error('RAG search error:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('Failed to search knowledge base:', error);
      return null;
    }
  }

  // Map website categories to knowledge base categories
  private static mapCategoryToKnowledgeBase(category: string): string {
    const categoryMap: { [key: string]: string } = {
      'smart-toilet': 'product_info',
      'one-piece-toilet': 'product_info', 
      'basin': 'product_info',
      'bathtub': 'product_info',
      'shower-enclosure': 'product_info',
      'faucet': 'product_info',
      'rain-shower': 'product_info',
      'bidet-spray': 'product_info',
      'urinal': 'product_info',
      'accessories': 'product_info',
      'about': 'company_info',
      'contact': 'contact_info',
      'warranty': 'warranty_info'
    };
    
    return categoryMap[category] || 'product_info';
  }

  // Map website categories to product types
  private static mapCategoryToProductType(category: string): string | undefined {
    const typeMap: { [key: string]: string } = {
      'smart-toilet': 'smart_toilet',
      'one-piece-toilet': 'one_piece_toilet',
      'basin': 'basin',
      'bathtub': 'bathtub',
      'shower-enclosure': 'shower_enclosure',
      'faucet': 'faucet',
      'rain-shower': 'rain_shower',
      'bidet-spray': 'bidet_spray',
      'urinal': 'urinal',
      'accessories': 'accessories'
    };
    
    return typeMap[category];
  }

  private static async getMockResponse(message: string, context: ProductContext | null): Promise<AIResponse> {
    const lowerMessage = message.toLowerCase();
    console.log('ü§ñ Generating mock response for:', message);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const relevanceCheck = KnowledgeBaseService.isQuestionRelevant(message);
    if (!relevanceCheck.isRelevant) {
      const suggestions = await SuggestionsService.getSuggestionsForContext(context);
      return {
        content: KnowledgeBaseService.getIrrelevantQuestionResponse(),
        suggestions: suggestions
      };
    }

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
    
    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏™‡∏î‡∏∏
    if (lowerMessage.includes('‡∏ß‡∏±‡∏™‡∏î‡∏∏') || lowerMessage.includes('‡∏ó‡∏≥‡∏à‡∏≤‡∏Å') || lowerMessage.includes('material')) {
      return {
        content: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå JOMOO ‡∏ú‡∏•‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á:

üè∫ **‡πÄ‡∏ã‡∏£‡∏≤‡∏°‡∏¥‡∏Å:** ‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Basin ‡πÅ‡∏•‡∏∞‡πÇ‡∏ñ‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå
üîß **‡πÇ‡∏•‡∏´‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û:** ‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥ Faucet ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô  
üõ°Ô∏è **‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢:** ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ Shower Enclosure
üíß **‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Å‡∏±‡∏ô‡∏ã‡∏∂‡∏°:** ‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥ Bathtub

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'material-1', text: '‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏≠‡∏á Smart Toilet', category: 'product' },
          { id: 'material-2', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', category: 'product' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥/‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
    if (lowerMessage.includes('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥') || lowerMessage.includes('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå') || lowerMessage.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ')) {
      if (context?.category === 'smart-toilet') {
        return {
          content: `Smart Toilet ‡∏Ç‡∏≠‡∏á JOMOO ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©:

üöø **‡∏£‡∏∞‡∏ö‡∏ö‡∏â‡∏µ‡∏î‡∏•‡πâ‡∏≤‡∏á:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢
üå°Ô∏è **‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á:** ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏ö‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
üéõÔ∏è **‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥:** ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
üß† **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:** ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'smart-features', text: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏î‡∏µ?', category: 'product' },
            { id: 'smart-contact', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° Smart Toilet', category: 'product' }
          ]
        };
      }
      
      return {
        content: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ JOMOO ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡πà‡∏ô:

üöΩ **Smart Toilet:** ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
üöø **Basin:** ‡πÄ‡∏ã‡∏£‡∏≤‡∏°‡∏¥‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô
üö∞ **Faucet:** ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ô‡πâ‡∏≥ ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
üõÅ **Bathtub:** ‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏ö‡∏≤‡∏¢

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'features-smart', text: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Smart Toilet', category: 'product' },
          { id: 'features-contact', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥', category: 'product' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå/‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    if (lowerMessage.includes('jomoo') || lowerMessage.includes('‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå') || lowerMessage.includes('‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó') || 
        lowerMessage.includes('‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö') || lowerMessage.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥')) {
      return {
        content: `JOMOO - ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á

üè¢ **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö JOMOO:**
‚Ä¢ ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô
‚Ä¢ ‡∏ú‡∏•‡∏¥‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
‚Ä¢ ‡∏°‡∏µ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÇ‡∏ñ‡∏™‡πâ‡∏ß‡∏° ‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥

üìç **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô TOA JOMOO:**
Smart Toilet, Basin, Faucet, Shower ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ About Us ‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'about-products', text: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', category: 'product' },
          { id: 'about-contact', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°', category: 'product' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    if (lowerMessage.includes('‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á') || lowerMessage.includes('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó') || lowerMessage.includes('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')) {
      return {
        content: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå TOA JOMOO ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢:

üöΩ **‡πÇ‡∏ñ‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå:**
‚Ä¢ Smart Toilet - ‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
‚Ä¢ One Piece Toilet - ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢

üöø **‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥:**
‚Ä¢ Shower Enclosure - ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥
‚Ä¢ Rain Shower - ‡∏ù‡∏±‡∏Å‡∏ö‡∏±‡∏ß‡∏™‡∏≤‡∏¢‡∏ù‡∏ô
‚Ä¢ Bathtub - ‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥

üö∞ **‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°:**
‚Ä¢ Basin - ‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
‚Ä¢ Faucet - ‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥
‚Ä¢ Bidet Spray - ‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞
‚Ä¢ Urinal - ‡πÇ‡∏ñ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ä‡∏≤‡∏¢
‚Ä¢ Accessories - ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°

‡∏ó‡∏∏‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'products-smart', text: '‡∏î‡∏π Smart Toilet', category: 'product' },
          { id: 'products-basin', text: '‡∏î‡∏π Basin', category: 'product' }
        ]
      };
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ö‡∏ö/‡∏£‡∏∏‡πà‡∏ô
    if (lowerMessage.includes('‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á') || lowerMessage.includes('‡∏£‡∏∏‡πà‡∏ô') || lowerMessage.includes('‡∏°‡∏µ‡∏Å‡∏µ‡πà')) {
      if (context?.category) {
        const productName = this.getProductDisplayName(context.category);
        return {
          content: `${productName} ‡∏Ç‡∏≠‡∏á JOMOO ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:

üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:**
‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∏‡πà‡∏ô
‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

üìû **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏ä‡πà‡∏ô:**
‚Ä¢ ‡∏™‡πÄ‡∏õ‡∏Ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô
‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∏‡πà‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡∏Ñ‡∏£‡∏±‡∏ö`,
          suggestions: [
            { id: 'models-contact', text: '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°', category: 'product' },
            { id: 'models-showroom', text: '‡∏ä‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°', category: 'product' }
          ]
        };
      }
    }

    // ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    if (lowerMessage.includes('‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠') || lowerMessage.includes('‡πÇ‡∏ó‡∏£') || lowerMessage.includes('contact')) {
      return {
        content: `‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ TOA JOMOO:

üìû **‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:**
‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤ Contact ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
‚Ä¢ ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
‚Ä¢ ‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£

üïê **‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:**
‚Ä¢ ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
‚Ä¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

üí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Contact ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ñ‡∏£‡∏±‡∏ö`,
        suggestions: [
          { id: 'contact-info', text: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', category: 'product' },
          { id: 'contact-showroom', text: '‡∏´‡∏≤‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏π‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô', category: 'product' }
        ]
      };
    }

    // Default response - ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
    return {
      content: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ TOA JOMOO 

${context ? `üìç ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤ ${this.getProductDisplayName(context.category)} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?` : 'üè¢ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå TOA JOMOO ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?'}

üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:**
‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠

üìû **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**
‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡πÄ‡∏õ‡∏Ñ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ñ‡∏£‡∏±‡∏ö`,
      suggestions: (await SuggestionsService.getSuggestionsForContext(context)).slice(0, 3)
    };
  }

  // Get display name for product category
  private static getProductDisplayName(category: string): string {
    const nameMap: { [key: string]: string } = {
      'smart-toilet': 'Smart Toilet',
      'one-piece-toilet': 'One Piece Toilet',
      'basin': '‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
      'bathtub': '‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥',
      'shower-enclosure': '‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥',
      'faucet': '‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥',
      'rain-shower': '‡∏ù‡∏±‡∏Å‡∏ö‡∏±‡∏ß‡∏™‡∏≤‡∏¢‡∏ù‡∏ô',
      'bidet-spray': '‡∏™‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡∏ä‡∏≥‡∏£‡∏∞',
      'urinal': '‡πÇ‡∏ñ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ä‡∏≤‡∏¢',
      'accessories': '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°'
    };
    
    return nameMap[category] || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
  }

  // Get product recommendations based on context (only real products)
  private static getProductRecommendations(context: ProductContext | null): ProductRecommendation[] {
    if (!context?.category) return [];

    // Return only real products that exist in our data files
    if (context.category === 'smart-toilet') {
      return [
        {
          productId: 'smart1',
          productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô 1',
          reason: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î Smart Toilet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
          image: '/lovable-uploads/3aede93b-84f3-4a77-acf5-a767654f5f65.png',
          category: 'smart-toilet'
        }
      ];
    }

    if (context.category === 'one-piece-toilet') {
      return [
        {
          productId: 'onepiece1',
          productName: 'One Piece Toilet ‡∏£‡∏∏‡πà‡∏ô 1',
          reason: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î One Piece Toilet ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
          image: '/lovable-uploads/43b4b548-71a6-4327-93ae-90547e01ef13.png',
          category: 'one-piece-toilet'
        }
      ];
    }

    return [];
  }

  private static getSmartToiletRecommendations(): ProductRecommendation[] {
    return [
      {
        productId: 'st1',
        productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
        reason: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
        image: '/lovable-uploads/353d8916-0ba6-457a-95a4-cfc67b65e5f6.png',
        category: 'toilet'
      },
      {
        productId: 'st2', 
        productName: 'Smart Toilet ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î',
        reason: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        image: '/lovable-uploads/450f66c7-17d5-4b40-8f20-2c239481083e.png', 
        category: 'toilet'
      }
    ];
  }

  // Generate embeddings for knowledge base (used for initial setup)
  static async generateEmbeddings(): Promise<void> {
    try {
      const { data, error } = await supabase.functions.invoke('generate-embeddings', {
        body: { action: 'generate_all' }
      });

      if (error) {
        console.error('Error generating embeddings:', error);
        throw error;
      }

      console.log('Embeddings generated successfully:', data);
    } catch (error) {
      console.error('Failed to generate embeddings:', error);
      throw error;
    }
  }

  // Method for future OpenAI integration
  static async callOpenAI(message: string, context: ProductContext | null): Promise<string> {
    // This will be implemented when OpenAI API key is provided
    const prompt = context 
      ? `Context: User is viewing ${context.productName} (${context.category}). ${message}`
      : message;

    // Placeholder for actual OpenAI API call
    console.log('Would call OpenAI with prompt:', prompt);
    
    throw new Error('OpenAI API key not configured');
  }
}